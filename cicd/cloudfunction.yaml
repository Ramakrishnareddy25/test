name: Cloud Functions Deployment

on:
  pull_request:
    branches:
      - master
    paths:
      - 'application/cloudfunctions/**'

  push:
    branches:
      - master
    paths:
      - 'application/cloudfunctions/**'

# --------- STEP 1: PR Checks (Security Scan only) ---------
jobs:
  pr_security_scan:
    if: github.event_name == 'pull_request'
    name: PR Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: setup python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m  pip install --upgrade pip
          pip install flake8 pytest
          if [-f requirements.txt]; then pip install -r requirements.txt; fi

      - name: Lint the flakes
        run: |
          # stop the build if there aare python errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The Github editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# --------- STEP 2: Post-Merge Deployment Flow ---------
  post_merge_security_scan:
    if: github.event_name == 'push'
    name: Post-Merge SonarQube Scan
    runs-on: ubuntu-latest
    outputs:
      scan_result: ${{ steps.scan.outcome }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      id: quality_check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
          pollingTimeoutSec: 600
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate fails
      if: steps.quality_check.outcome != 'success'
      run: |
        echo  "SonarQube Quality Gate check failed. Stopping pipeline."
        exit 1

  deploy:
    if: github.event_name == 'push'
    name: Deploy to Cloud functions
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: '${{ secrets.GOOGLE_PROJECT_ID }}'


    - name: Deploy to Cloud function
      run: |
        gcloud functions deploy your-function-name \
            --region=us-central1 \
            --runtime=python310 \            # change to nodejs18, go121, etc. if needed
            --source=application/cloudfunctions/your-function-directory \
            --entry-point=main \             # replace with your actual entry point
            --trigger-http \
            --allow-unauthenticated

    - name: Get Cloud Function URL
      id: get-url
      run: |
        URL=$(gcloud functions describe your-function-name --region=us-central1 --format='value(httpsTrigger.url)')
        echo "FUNCTION_URL=$URL" >> "$GITHUB_ENV"

    - name: Verify function availability
      run: |
        echo "Verifying function at: $FUNCTION_URL"
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FUNCTION_URL")
        echo "HTTP Status: $STATUS"
        if [ "$STATUS" -ne 200 ]; then
          echo "Function endpoint is not responding with 200 OK."
          exit 1
        fi
