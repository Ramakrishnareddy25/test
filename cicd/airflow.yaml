name: Airflow DAG Deployment

on:
  pull_request:
    branches:
      - master
    paths:
      - 'application/airflow/**'

  push:
    branches:
      - master
    paths:
      - 'application/airflow/**'

# --------- STEP 1: PR Checks (Security Scan only) ---------
jobs:
  pr_security_scan:
    if: github.event_name == 'pull_request'
    name: PR Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: setup python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m  pip install --upgrade pip
          pip install flake8 pytest
          if [-f requirements.txt]; then pip install -r requirements.txt; fi

      - name: Lint the flakes
        run: |
          # stop the build if there aare python errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The Github editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# --------- STEP 2: Post-Merge Deployment Flow ---------
  post_merge_security_scan:
    if: github.event_name == 'push'
    name: Post-Merge SonarQube Scan
    runs-on: ubuntu-latest
    outputs:
      scan_result: ${{ steps.scan.outcome }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
          pollingTimeoutSec: 600
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate fails
      if: steps.quality_check.outcome != 'success'
      run: |
        echo  "SonarQube Quality Gate check failed. Stopping pipeline."
        exit 1

  manual_approval:
    if: github.event_name == 'push'
    name: Manual Approval
    needs: post_merge_security_scan
    runs-on: ubuntu-latest
    environment:
      name: uat
      url: https://console.cloud.google.com/storage/browser/test-backend-123/terraform/dags
    steps:
      - name: Wait for Approval
        uses: trstringer/manual-approval@v1
        with:
          approvers: jyotibhagat1
          minimum-approvals: 1
          issue-title: "Manual Approval for Airflow DAG Deployment"
          issue-body: "Security scan passed. Please approve deployment to UAT Composer."
          secret: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    if: github.event_name == 'push'
    name: Deploy DAGs to GCS - UAT
    needs: manual_approval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Dry Run - Show what will be deployed
        run: |
          echo "Dry run - displaying changes that would be made to GCS DAG bucket..."
          export DAG_FOLDER="application/airflow/"
          export TARGET_BUCKET="gs://test-backend-123/terraform/dags"
          gsutil -m rsync -r -c -n -x "^.*(_pycache|.pytest_cache|.git|.DS_Store|init_.pyc|.ipynb_checkpoints|.log)$" $DAG_FOLDER $TARGET_BUCKET

      - name: Upload Updated DAGs
        run: |
          export DAG_FOLDER="application/airflow/"
          export TARGET_BUCKET="gs://test-backend-123/terraform/dags"

          echo "Syncing updated DAGs to GCS..."
          gsutil -m rsync -r -c -x "^.*(_pycache|.pytest_cache|.git|.DS_Store|init_.pyc|.ipynb_checkpoints|.log)$" $DAG_FOLDER $TARGET_BUCKET

      - name: Verify Deployment
        run: |
          echo "Deployed DAGs:"
          gsutil ls gs://test-backend-123/terraform/dags

  rollback:
    if: github.event_name == 'push' && failure()
    name: Rollback on Failure
    runs-on: ubuntu-latest
    steps:
      - name: Rollback DAGs
        run: |
          echo "Rolling back to backup DAGs..."
          # gsutil -m cp -r gs://test-backend-123/dags/* gs://test-backend-123/terraform/dags/
